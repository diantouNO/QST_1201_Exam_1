package GID.Other;
/*
 * 优化部分
 * 	没有Reduce，在map完成之后直接将数据写入HDFS
 * 	map中没有导出数据，通过cleanUp最后导出数据
 * 	减少变量的声明，避免每次运行时声明变量占用内存
 */
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashSet;
import java.util.Locale;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class countIp {
	public static class Map extends Mapper<LongWritable, Text, Text, Text> {
		Text theKey = new Text();
		Text theValue = new Text();
		HashSet<String> ipSet = new HashSet<String>();
		long count=0;
		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			String line = String.valueOf(value);
			String[] str = line.split("\\t");
			if(str.length < 2){
				return;
			}
			String ip = str[0];
			if(!ipSet.contains(ip)){
				ipSet.add(ip);
				count++;
			}
		}

		protected void cleanup(Context context) throws IOException, InterruptedException {
			String cou = String.valueOf(count);
			theKey.set(cou);
			context.write(theKey, theValue);
		}
	}
	
	public static class Reduce extends Reducer<Text, Text, Text, Text> {
		public void reduce(Text key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
		}

		public void cleanup(Context context) throws IOException, InterruptedException {
		}
	}

	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = Job.getInstance(conf, "Ray" + countIp.class);
		job.setJobName("countIp");
		job.setJarByClass(countIp.class);

		job.setNumReduceTasks(0);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(Text.class);

		job.setMapperClass(Map.class);
		job.setReducerClass(Reduce.class);

		FileInputFormat.setInputPaths(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		boolean status = job.waitForCompletion(true);
		return;
	}
}
